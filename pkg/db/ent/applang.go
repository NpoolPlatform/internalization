// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/internationalization/pkg/db/ent/applang"
	"github.com/google/uuid"
)

// AppLang is the model entity for the AppLang schema.
type AppLang struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// LangID holds the value of the "lang_id" field.
	LangID uuid.UUID `json:"lang_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppLang) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case applang.FieldCreateAt, applang.FieldUpdateAt, applang.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case applang.FieldID, applang.FieldAppID, applang.FieldLangID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppLang", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppLang fields.
func (al *AppLang) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applang.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				al.ID = *value
			}
		case applang.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				al.AppID = *value
			}
		case applang.FieldLangID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field lang_id", values[i])
			} else if value != nil {
				al.LangID = *value
			}
		case applang.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				al.CreateAt = uint32(value.Int64)
			}
		case applang.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				al.UpdateAt = uint32(value.Int64)
			}
		case applang.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				al.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppLang.
// Note that you need to call AppLang.Unwrap() before calling this method if this AppLang
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AppLang) Update() *AppLangUpdateOne {
	return (&AppLangClient{config: al.config}).UpdateOne(al)
}

// Unwrap unwraps the AppLang entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AppLang) Unwrap() *AppLang {
	tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppLang is not a transactional entity")
	}
	al.config.driver = tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AppLang) String() string {
	var builder strings.Builder
	builder.WriteString("AppLang(")
	builder.WriteString(fmt.Sprintf("id=%v", al.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", al.AppID))
	builder.WriteString(", lang_id=")
	builder.WriteString(fmt.Sprintf("%v", al.LangID))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", al.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", al.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", al.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppLangs is a parsable slice of AppLang.
type AppLangs []*AppLang

func (al AppLangs) config(cfg config) {
	for _i := range al {
		al[_i].config = cfg
	}
}
