// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/internationalization/pkg/db/ent/applang"
	"github.com/google/uuid"
)

// AppLangCreate is the builder for creating a AppLang entity.
type AppLangCreate struct {
	config
	mutation *AppLangMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (alc *AppLangCreate) SetAppID(u uuid.UUID) *AppLangCreate {
	alc.mutation.SetAppID(u)
	return alc
}

// SetLangID sets the "lang_id" field.
func (alc *AppLangCreate) SetLangID(u uuid.UUID) *AppLangCreate {
	alc.mutation.SetLangID(u)
	return alc
}

// SetCreateAt sets the "create_at" field.
func (alc *AppLangCreate) SetCreateAt(u uint32) *AppLangCreate {
	alc.mutation.SetCreateAt(u)
	return alc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (alc *AppLangCreate) SetNillableCreateAt(u *uint32) *AppLangCreate {
	if u != nil {
		alc.SetCreateAt(*u)
	}
	return alc
}

// SetUpdateAt sets the "update_at" field.
func (alc *AppLangCreate) SetUpdateAt(u uint32) *AppLangCreate {
	alc.mutation.SetUpdateAt(u)
	return alc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (alc *AppLangCreate) SetNillableUpdateAt(u *uint32) *AppLangCreate {
	if u != nil {
		alc.SetUpdateAt(*u)
	}
	return alc
}

// SetDeleteAt sets the "delete_at" field.
func (alc *AppLangCreate) SetDeleteAt(u uint32) *AppLangCreate {
	alc.mutation.SetDeleteAt(u)
	return alc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (alc *AppLangCreate) SetNillableDeleteAt(u *uint32) *AppLangCreate {
	if u != nil {
		alc.SetDeleteAt(*u)
	}
	return alc
}

// SetID sets the "id" field.
func (alc *AppLangCreate) SetID(u uuid.UUID) *AppLangCreate {
	alc.mutation.SetID(u)
	return alc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (alc *AppLangCreate) SetNillableID(u *uuid.UUID) *AppLangCreate {
	if u != nil {
		alc.SetID(*u)
	}
	return alc
}

// Mutation returns the AppLangMutation object of the builder.
func (alc *AppLangCreate) Mutation() *AppLangMutation {
	return alc.mutation
}

// Save creates the AppLang in the database.
func (alc *AppLangCreate) Save(ctx context.Context) (*AppLang, error) {
	var (
		err  error
		node *AppLang
	)
	alc.defaults()
	if len(alc.hooks) == 0 {
		if err = alc.check(); err != nil {
			return nil, err
		}
		node, err = alc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppLangMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = alc.check(); err != nil {
				return nil, err
			}
			alc.mutation = mutation
			if node, err = alc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(alc.hooks) - 1; i >= 0; i-- {
			if alc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = alc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, alc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AppLangCreate) SaveX(ctx context.Context) *AppLang {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AppLangCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AppLangCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AppLangCreate) defaults() {
	if _, ok := alc.mutation.CreateAt(); !ok {
		v := applang.DefaultCreateAt()
		alc.mutation.SetCreateAt(v)
	}
	if _, ok := alc.mutation.UpdateAt(); !ok {
		v := applang.DefaultUpdateAt()
		alc.mutation.SetUpdateAt(v)
	}
	if _, ok := alc.mutation.DeleteAt(); !ok {
		v := applang.DefaultDeleteAt()
		alc.mutation.SetDeleteAt(v)
	}
	if _, ok := alc.mutation.ID(); !ok {
		v := applang.DefaultID()
		alc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AppLangCreate) check() error {
	if _, ok := alc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppLang.app_id"`)}
	}
	if _, ok := alc.mutation.LangID(); !ok {
		return &ValidationError{Name: "lang_id", err: errors.New(`ent: missing required field "AppLang.lang_id"`)}
	}
	if _, ok := alc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppLang.create_at"`)}
	}
	if _, ok := alc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppLang.update_at"`)}
	}
	if _, ok := alc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppLang.delete_at"`)}
	}
	return nil
}

func (alc *AppLangCreate) sqlSave(ctx context.Context) (*AppLang, error) {
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (alc *AppLangCreate) createSpec() (*AppLang, *sqlgraph.CreateSpec) {
	var (
		_node = &AppLang{config: alc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: applang.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: applang.FieldID,
			},
		}
	)
	_spec.OnConflict = alc.conflict
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := alc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: applang.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := alc.mutation.LangID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: applang.FieldLangID,
		})
		_node.LangID = value
	}
	if value, ok := alc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applang.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := alc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applang.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := alc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applang.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppLang.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppLangUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (alc *AppLangCreate) OnConflict(opts ...sql.ConflictOption) *AppLangUpsertOne {
	alc.conflict = opts
	return &AppLangUpsertOne{
		create: alc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppLang.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (alc *AppLangCreate) OnConflictColumns(columns ...string) *AppLangUpsertOne {
	alc.conflict = append(alc.conflict, sql.ConflictColumns(columns...))
	return &AppLangUpsertOne{
		create: alc,
	}
}

type (
	// AppLangUpsertOne is the builder for "upsert"-ing
	//  one AppLang node.
	AppLangUpsertOne struct {
		create *AppLangCreate
	}

	// AppLangUpsert is the "OnConflict" setter.
	AppLangUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppLangUpsert) SetAppID(v uuid.UUID) *AppLangUpsert {
	u.Set(applang.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppLangUpsert) UpdateAppID() *AppLangUpsert {
	u.SetExcluded(applang.FieldAppID)
	return u
}

// SetLangID sets the "lang_id" field.
func (u *AppLangUpsert) SetLangID(v uuid.UUID) *AppLangUpsert {
	u.Set(applang.FieldLangID, v)
	return u
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *AppLangUpsert) UpdateLangID() *AppLangUpsert {
	u.SetExcluded(applang.FieldLangID)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppLangUpsert) SetCreateAt(v uint32) *AppLangUpsert {
	u.Set(applang.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppLangUpsert) UpdateCreateAt() *AppLangUpsert {
	u.SetExcluded(applang.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppLangUpsert) AddCreateAt(v uint32) *AppLangUpsert {
	u.Add(applang.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppLangUpsert) SetUpdateAt(v uint32) *AppLangUpsert {
	u.Set(applang.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppLangUpsert) UpdateUpdateAt() *AppLangUpsert {
	u.SetExcluded(applang.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppLangUpsert) AddUpdateAt(v uint32) *AppLangUpsert {
	u.Add(applang.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppLangUpsert) SetDeleteAt(v uint32) *AppLangUpsert {
	u.Set(applang.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppLangUpsert) UpdateDeleteAt() *AppLangUpsert {
	u.SetExcluded(applang.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppLangUpsert) AddDeleteAt(v uint32) *AppLangUpsert {
	u.Add(applang.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppLang.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(applang.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppLangUpsertOne) UpdateNewValues() *AppLangUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(applang.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppLang.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppLangUpsertOne) Ignore() *AppLangUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppLangUpsertOne) DoNothing() *AppLangUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppLangCreate.OnConflict
// documentation for more info.
func (u *AppLangUpsertOne) Update(set func(*AppLangUpsert)) *AppLangUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppLangUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppLangUpsertOne) SetAppID(v uuid.UUID) *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppLangUpsertOne) UpdateAppID() *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *AppLangUpsertOne) SetLangID(v uuid.UUID) *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *AppLangUpsertOne) UpdateLangID() *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateLangID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppLangUpsertOne) SetCreateAt(v uint32) *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppLangUpsertOne) AddCreateAt(v uint32) *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppLangUpsertOne) UpdateCreateAt() *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppLangUpsertOne) SetUpdateAt(v uint32) *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppLangUpsertOne) AddUpdateAt(v uint32) *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppLangUpsertOne) UpdateUpdateAt() *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppLangUpsertOne) SetDeleteAt(v uint32) *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppLangUpsertOne) AddDeleteAt(v uint32) *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppLangUpsertOne) UpdateDeleteAt() *AppLangUpsertOne {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppLangUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppLangCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppLangUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppLangUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppLangUpsertOne.ID is not supported by MySQL driver. Use AppLangUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppLangUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppLangCreateBulk is the builder for creating many AppLang entities in bulk.
type AppLangCreateBulk struct {
	config
	builders []*AppLangCreate
	conflict []sql.ConflictOption
}

// Save creates the AppLang entities in the database.
func (alcb *AppLangCreateBulk) Save(ctx context.Context) ([]*AppLang, error) {
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AppLang, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppLangMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = alcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AppLangCreateBulk) SaveX(ctx context.Context) []*AppLang {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AppLangCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AppLangCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppLang.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppLangUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (alcb *AppLangCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppLangUpsertBulk {
	alcb.conflict = opts
	return &AppLangUpsertBulk{
		create: alcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppLang.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (alcb *AppLangCreateBulk) OnConflictColumns(columns ...string) *AppLangUpsertBulk {
	alcb.conflict = append(alcb.conflict, sql.ConflictColumns(columns...))
	return &AppLangUpsertBulk{
		create: alcb,
	}
}

// AppLangUpsertBulk is the builder for "upsert"-ing
// a bulk of AppLang nodes.
type AppLangUpsertBulk struct {
	create *AppLangCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppLang.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(applang.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppLangUpsertBulk) UpdateNewValues() *AppLangUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(applang.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppLang.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppLangUpsertBulk) Ignore() *AppLangUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppLangUpsertBulk) DoNothing() *AppLangUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppLangCreateBulk.OnConflict
// documentation for more info.
func (u *AppLangUpsertBulk) Update(set func(*AppLangUpsert)) *AppLangUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppLangUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppLangUpsertBulk) SetAppID(v uuid.UUID) *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppLangUpsertBulk) UpdateAppID() *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *AppLangUpsertBulk) SetLangID(v uuid.UUID) *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *AppLangUpsertBulk) UpdateLangID() *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateLangID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppLangUpsertBulk) SetCreateAt(v uint32) *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppLangUpsertBulk) AddCreateAt(v uint32) *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppLangUpsertBulk) UpdateCreateAt() *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppLangUpsertBulk) SetUpdateAt(v uint32) *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppLangUpsertBulk) AddUpdateAt(v uint32) *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppLangUpsertBulk) UpdateUpdateAt() *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppLangUpsertBulk) SetDeleteAt(v uint32) *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppLangUpsertBulk) AddDeleteAt(v uint32) *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppLangUpsertBulk) UpdateDeleteAt() *AppLangUpsertBulk {
	return u.Update(func(s *AppLangUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppLangUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppLangCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppLangCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppLangUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
